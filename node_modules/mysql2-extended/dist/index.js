"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = exports.MySQL2Extended = void 0;
const query_base_1 = require("./query-base");
__exportStar(require("./types"), exports);
class MySQL2Extended extends query_base_1.QueryBase {
    constructor(driver) {
        super(driver);
        this.driver = driver;
    }
    async begin() {
        const con = await this.getConnection();
        const transactionContext = new Transaction(con);
        await transactionContext._begin();
        return transactionContext;
    }
    async transaction(callback) {
        const transaction = await this.begin();
        let result;
        try {
            result = await callback(transaction);
            await transaction.commit();
        }
        catch (err) {
            await transaction.rollback();
            throw err;
        }
        return result;
    }
}
exports.MySQL2Extended = MySQL2Extended;
class Transaction extends query_base_1.QueryBase {
    constructor(con) {
        super(con);
        this.con = con;
        this.hasBegin = false;
    }
    async _begin() {
        if (this.hasBegin) {
            throw new Error('Transaction has already began');
        }
        await this.con.query('BEGIN');
    }
    async commit() {
        this.validateCleanAndMarkDirty('COMMIT');
        await this.con.query('COMMIT');
    }
    async rollback() {
        this.validateCleanAndMarkDirty('ROLLBACK');
        await this.con.query('ROLLBACK');
    }
    validateCleanAndMarkDirty(action) {
        if (!this.lastAction) {
            this.lastAction = action;
            return;
        }
        throw new Error(`Cannot ${action} transaction. Already got ${this.lastAction}`);
    }
}
exports.Transaction = Transaction;
